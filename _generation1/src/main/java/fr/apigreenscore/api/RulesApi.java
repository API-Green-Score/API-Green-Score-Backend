/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package fr.apigreenscore.api;

import fr.apigreenscore.model.Rule;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-15T22:08:39.761998+01:00[Europe/Paris]")
@Validated
@Tag(name = "rules", description = "the rules API")
public interface RulesApi {

    default RulesApiDelegate getDelegate() {
        return new RulesApiDelegate() {};
    }

    /**
     * GET /rules/{ruleId} : Get rule by ID
     * get a single rule
     *
     * @param ruleId ID of rule to return (required)
     * @return Success (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Rule not found (status code 404)
     */
    @Operation(
        operationId = "getRuleById",
        summary = "Get rule by ID",
        description = "get a single rule",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Rule.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Rule not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rules/{ruleId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Rule> getRuleById(
        @Parameter(name = "ruleId", description = "ID of rule to return", required = true, in = ParameterIn.PATH) @PathVariable("ruleId") String ruleId
    ) {
        return getDelegate().getRuleById(ruleId);
    }


    /**
     * GET /rules : Get all available rules
     * Get all available rules with pagination and sorted by ruleId
     *
     * @param page Zero-based page index (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 20)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getRules",
        summary = "Get all available rules",
        description = "Get all available rules with pagination and sorted by ruleId",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Rule.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rules",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Rule>> getRules(
        @Min(0) @Parameter(name = "page", description = "Zero-based page index", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Min(1) @Parameter(name = "size", description = "The size of the page to be returned", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size
    ) {
        return getDelegate().getRules(page, size);
    }

}
